name: Test K3s, Kubernetes, and MicroK8s

on:
  workflow_dispatch:
    inputs:
  pull_request:
  pull_request_target:
  push:
  release:
    types:
      - published
    
jobs:
  first-job:
    runs-on: ubuntu-18.04
    steps:
      - name: firstone
        if: github.event_name == 'blahdy-blah'
        run: |
          echo hello!
          echo foo: ${{ secrets.foo }}
          echo new from a fork!
  
  second-job:
    runs-on: ubuntu-18.04
    needs: first-job
    steps:
      - name: secondone
        run: |
          echo hello1
          echo foo: ${{ secrets.foo }}
     
  helm-test:
    runs-on: ubuntu-18.04
    needs: first-job
    steps:
      - name: is-helm-here
        run: |
          helm repo add akri-helm-charts https://deislabs.github.io/akri/
          helm version
          kubectl version
     
  test-cases:
    # Run workflow pull_request if it is NOT a fork, as pull_request_target if it IS a fork
    if: >-
      ( github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.fork == true ) ||
      ( github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false ) ||
      ( !(startsWith(github.event_name, 'pull_request')) )
    runs-on: ubuntu-18.04
    needs: second-job

    strategy:
      fail-fast: false
      matrix:
        kube-runtime:
          - K3s-1.16
          - K3s-1.17
          - K3s-1.18
          - K3s-1.19
          - MicroK8s-1.18
          - MicroK8s-1.19
          - Kubernetes-1.16
          - Kubernetes-1.17
          - Kubernetes-1.18
          - Kubernetes-1.19
        test-case:
          - end-to-end
        include:
          - kube-runtime: MicroK8s-1.18
            kube-version: 1.18/stable
          - kube-runtime: MicroK8s-1.19
            kube-version: 1.19/stable
          - kube-runtime: K3s-1.16
            kube-version: v1.16.14+k3s1
          - kube-runtime: K3s-1.17
            kube-version: v1.17.17+k3s1
          - kube-runtime: K3s-1.18
            kube-version: v1.18.9+k3s1
          - kube-runtime: K3s-1.19
            kube-version: v1.19.4+k3s1
          - kube-runtime: Kubernetes-1.16
            kube-version: 1.16.15-00
          - kube-runtime: Kubernetes-1.17
            kube-version: 1.17.14-00
          - kube-runtime: Kubernetes-1.18
            kube-version: 1.18.12-00
          - kube-runtime: Kubernetes-1.19
            kube-version: 1.19.4-00
          - test-case: end-to-end
            test-file: test/run-end-to-end.py

    steps:
    - name: Checkout the merged commit from PR and base branch
      uses: actions/checkout@v2
      if: github.event_name == 'pull_request_target'
      with:
        # pull_request_target is run in the context of the base repository
        # of the pull request, so the default ref is master branch and
        # ref should be manually set to the head of the PR
        ref: refs/pull/${{ github.event.pull_request.number }}/head
        persist-credentials: false

    - name: Checkout the head commit of the branch
      if: ${{ github.event_name != 'pull_request_target' }}
      uses: actions/checkout@v2
      with:
        persist-credentials: false

    - if: startsWith(matrix.kube-runtime, 'K3s')
      name: Install K3s
      env:
        INSTALL_K3S_VERSION: ${{ matrix.kube-version }}
      run: |
        sudo curl -sfL https://get.k3s.io | sh -
        sudo addgroup k3s-admin
        sudo adduser $USER k3s-admin
        sudo usermod -a -G k3s-admin $USER
        sudo chgrp k3s-admin /etc/rancher/k3s/k3s.yaml
        sudo chmod g+r /etc/rancher/k3s/k3s.yaml
        sudo chmod 666 /etc/rancher/k3s/* 
        if [ "${{ matrix.kube-runtime }}" == "K3s-1.16" ]; then
          echo "Linking K3s device-plugins to Kubernetes default location"
          echo sudo ls /var/lib/rancher/k3s/agent/kubelet/device-plugins /var/lib/kubelet/device-plugins
          echo sudo ls /var/lib/kubelet/device-plugins
        fi
        mkdir -p ~/.kube/ && cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
        VERSION="v1.17.0"
        curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-${VERSION}-linux-amd64.tar.gz --output crictl-${VERSION}-linux-amd64.tar.gz
        sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C $(pwd)
        rm -f crictl-$VERSION-linux-amd64.tar.gz
        echo '--set agent.host.crictl=$(pwd)/crictl --set agent.host.dockerShimSock=/run/k3s/containerd/containerd.sock' > /tmp/cri_args_to_test.txt
        echo 'kubectl' > /tmp/runtime_cmd_to_test.txt
        echo '~/.kube/config' > /tmp/kubeconfig_path_to_test.txt
        until kubectl get node ${HOSTNAME,,} -o jsonpath='{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep 'Ready=True'; do echo "waiting for k3s to become ready"; sleep 10; done
        if [ "${{ matrix.kube-runtime }}" == "K3s-1.16" ]; then
          echo "Linking K3s device-plugins to Kubernetes default location"
          sudo ls /var/lib/rancher/k3s/agent/kubelet/device-plugins
          sudo ln -s /var/lib/rancher/k3s/agent/kubelet/device-plugins /var/lib/kubelet/device-plugins
          sudo ls /var/lib/kubelet/device-plugins
        fi

    - if: startsWith(matrix.kube-runtime, 'K3s')
      name: Access ctr with K3s
      run: |
        sudo k3s ctr image ls

    - if: startsWith(matrix.kube-runtime, 'Kubernetes')
      name: Install Kubernetes
      run: |
        sudo apt-get update -y
        sudo apt-get install  -o Dpkg::Options::="--force-overwrite" -y --allow-downgrades kubelet=${{ matrix.kube-version }} kubeadm=${{ matrix.kube-version }} kubectl=${{ matrix.kube-version }} 
        kubectl version && echo "kubectl return code: $?" || echo "kubectl return code: $?"
        kubeadm version && echo "kubeadm return code: $?" || echo "kubeadm return code: $?"
        kubelet --version && echo "kubelet return code: $?" || echo "kubelet return code: $?"
        sudo swapoff -a              
        sudo kubeadm init
        sudo mkdir -p $HOME/.kube
        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config
        kubectl taint nodes --all node-role.kubernetes.io/master-
        echo '--set agent.host.crictl=/usr/bin/crictl --set agent.host.dockerShimSock=/var/run/dockershim.sock' > /tmp/cri_args_to_test.txt
        echo 'kubectl' > /tmp/runtime_cmd_to_test.txt
        echo '~/.kube/config' > /tmp/kubeconfig_path_to_test.txt
        until kubectl get node ${HOSTNAME,,} -o jsonpath='{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep 'Ready=True'; do echo "waiting for kubernetes to become ready"; sleep 10; done

    - if: startsWith(matrix.kube-runtime, 'Kubernetes')
      name: Access ctr with Kubernetes
      run: |
        sudo ctr images ls

    - if: startsWith(matrix.kube-runtime, 'MicroK8s')
      name: Install MicroK8s
      run: |
        sudo snap install microk8s --classic --channel=${{ matrix.kube-version }}
        sudo microk8s status --wait-ready
        sudo usermod -a -G microk8s $USER
        sudo ls -la $HOME/.kube
        echo sudo chown $(id -u):$(id -g) $HOME/.kube
        sudo chown -f -R $USER $HOME/.kube --verbose
        sudo sh -c "microk8s.kubectl config view --raw >~/.kube/config"
        sudo cat ~/.kube/config
        sudo microk8s.enable helm3
        sudo microk8s.enable rbac
        sudo microk8s.enable dns
        sudo microk8s.status --wait-ready
        VERSION="v1.17.0"
        curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-${VERSION}-linux-amd64.tar.gz --output crictl-${VERSION}-linux-amd64.tar.gz
        sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
        rm -f crictl-$VERSION-linux-amd64.tar.gz
        echo '--set agent.host.crictl=/usr/local/bin/crictl --set agent.host.dockerShimSock=/var/snap/microk8s/common/run/containerd.sock' > /tmp/cri_args_to_test.txt
        echo 'microk8s kubectl' > /tmp/runtime_cmd_to_test.txt
        echo '~/.kube/config' > /tmp/kubeconfig_path_to_test.txt

    - if: startsWith(matrix.kube-runtime, 'MicroK8s')
      name: Access CTR with MicroK8s
      run: |
        sleep 5 # 15 solves the problem # 30 solves the problem # 60 solves the problem
        sudo microk8s.status --wait-ready
        sudo microk8s ctr images ls

